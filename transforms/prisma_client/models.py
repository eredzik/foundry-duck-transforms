# -*- coding: utf-8 -*-
# code generated by Prisma. DO NOT EDIT.
# pyright: reportUnusedImport=false
# fmt: off

# global imports for type checking
from builtins import bool as _bool
from builtins import int as _int
from builtins import float as _float
from builtins import str as _str
import sys
import decimal
import datetime
from typing import (
    TYPE_CHECKING,
    Optional,
    Iterable,
    Iterator,
    Sequence,
    Callable,
    ClassVar,
    NoReturn,
    TypeVar,
    Generic,
    Mapping,
    Tuple,
    Union,
    List,
    Dict,
    Type,
    Any,
    Set,
    overload,
    cast,
)
from typing_extensions import TypedDict, Literal


from typing_extensions import LiteralString
# -- template models.py.jinja --
import os
import logging
import inspect
import warnings
from collections import OrderedDict

from pydantic import BaseModel, Field

from . import types, enums, errors, fields, bases
from ._types import FuncType
from ._compat import model_rebuild, field_validator
from ._builder import serialize_base64
from .generator import partial_models_ctx, PartialModelField


log: logging.Logger = logging.getLogger(__name__)
_created_partial_types: Set[str] = set()

class dataset(bases.Basedataset):
    """Represents a dataset record"""

    id: _int
    rid: _str
    dataset_identifier: Optional[List['models.dataset_identifier']] = None
    dataset_version: Optional[List['models.dataset_version']] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.datasetKeys']] = None,
        exclude: Optional[Iterable['types.datasetKeys']] = None,
        required: Optional[Iterable['types.datasetKeys']] = None,
        optional: Optional[Iterable['types.datasetKeys']] = None,
        relations: Optional[Mapping['types.datasetRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.datasetKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _dataset_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _dataset_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _dataset_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _dataset_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _dataset_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _dataset_relational_fields:
                        raise errors.UnknownRelationalFieldError('dataset', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid dataset / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'dataset',
            }
        )
        _created_partial_types.add(name)


class dataset_identifier(bases.Basedataset_identifier):
    """Represents a dataset_identifier record"""

    id: _int
    rid_or_path: _str
    dataset: Optional['models.dataset'] = None
    datasetid: _int



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.dataset_identifierKeys']] = None,
        exclude: Optional[Iterable['types.dataset_identifierKeys']] = None,
        required: Optional[Iterable['types.dataset_identifierKeys']] = None,
        optional: Optional[Iterable['types.dataset_identifierKeys']] = None,
        relations: Optional[Mapping['types.dataset_identifierRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.dataset_identifierKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _dataset_identifier_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _dataset_identifier_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _dataset_identifier_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _dataset_identifier_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _dataset_identifier_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _dataset_identifier_relational_fields:
                        raise errors.UnknownRelationalFieldError('dataset_identifier', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid dataset_identifier / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'dataset_identifier',
            }
        )
        _created_partial_types.add(name)


class dataset_version(bases.Basedataset_version):
    """Represents a dataset_version record"""

    id: _int
    data_identity_id: _str
    data_identity_date: datetime.datetime
    branch: Optional['models.data_branch'] = None
    dataset: Optional['models.dataset'] = None
    datasetId: _int
    data_branchId: _int



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.dataset_versionKeys']] = None,
        exclude: Optional[Iterable['types.dataset_versionKeys']] = None,
        required: Optional[Iterable['types.dataset_versionKeys']] = None,
        optional: Optional[Iterable['types.dataset_versionKeys']] = None,
        relations: Optional[Mapping['types.dataset_versionRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.dataset_versionKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _dataset_version_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _dataset_version_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _dataset_version_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _dataset_version_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _dataset_version_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _dataset_version_relational_fields:
                        raise errors.UnknownRelationalFieldError('dataset_version', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid dataset_version / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'dataset_version',
            }
        )
        _created_partial_types.add(name)


class data_branch(bases.Basedata_branch):
    """Represents a data_branch record"""

    id: _int
    full_branch_name: _str
    sanitized_branch_name: _str
    dataset_version: Optional[List['models.dataset_version']] = None



    @staticmethod
    def create_partial(
        name: str,
        include: Optional[Iterable['types.data_branchKeys']] = None,
        exclude: Optional[Iterable['types.data_branchKeys']] = None,
        required: Optional[Iterable['types.data_branchKeys']] = None,
        optional: Optional[Iterable['types.data_branchKeys']] = None,
        relations: Optional[Mapping['types.data_branchRelationalFieldKeys', str]] = None,
        exclude_relational_fields: bool = False,
    ) -> None:
        if not os.environ.get('PRISMA_GENERATOR_INVOCATION'):
            raise RuntimeError(
                'Attempted to create a partial type outside of client generation.'
            )

        if name in _created_partial_types:
            raise ValueError(f'Partial type "{name}" has already been created.')

        if include is not None:
            if exclude is not None:
                raise TypeError('Exclude and include are mutually exclusive.')
            if exclude_relational_fields is True:
                raise TypeError('Include and exclude_relational_fields=True are mutually exclusive.')

        if required and optional:
            shared = set(required) & set(optional)
            if shared:
                raise ValueError(f'Cannot make the same field(s) required and optional {shared}')

        if exclude_relational_fields and relations:
            raise ValueError(
                'exclude_relational_fields and relations are mutually exclusive'
            )

        fields: Dict['types.data_branchKeys', PartialModelField] = OrderedDict()

        try:
            if include:
                for field in include:
                    fields[field] = _data_branch_fields[field].copy()
            elif exclude:
                for field in exclude:
                    if field not in _data_branch_fields:
                        raise KeyError(field)

                fields = {
                    key: data.copy()
                    for key, data in _data_branch_fields.items()
                    if key not in exclude
                }
            else:
                fields = {
                    key: data.copy()
                    for key, data in _data_branch_fields.items()
                }

            if required:
                for field in required:
                    fields[field]['optional'] = False

            if optional:
                for field in optional:
                    fields[field]['optional'] = True

            if exclude_relational_fields:
                fields = {
                    key: data
                    for key, data in fields.items()
                    if key not in _data_branch_relational_fields
                }

            if relations:
                for field, type_ in relations.items():
                    if field not in _data_branch_relational_fields:
                        raise errors.UnknownRelationalFieldError('data_branch', field)

                    # TODO: this method of validating types is not ideal
                    # as it means we cannot two create partial types that
                    # reference each other
                    if type_ not in _created_partial_types:
                        raise ValueError(
                            f'Unknown partial type: "{type_}". '
                            f'Did you remember to generate the {type_} type before this one?'
                        )

                    # TODO: support non prisma.partials models
                    info = fields[field]
                    if info['is_list']:
                        info['type'] = f'List[\'partials.{type_}\']'
                    else:
                        info['type'] = f'\'partials.{type_}\''
        except KeyError as exc:
            raise ValueError(
                f'{exc.args[0]} is not a valid data_branch / {name} field.'
            ) from None

        models = partial_models_ctx.get()
        models.append(
            {
                'name': name,
                'fields': cast(Mapping[str, PartialModelField], fields),
                'from_model': 'data_branch',
            }
        )
        _created_partial_types.add(name)



_dataset_relational_fields: Set[str] = {
        'dataset_identifier',
        'dataset_version',
    }
_dataset_fields: Dict['types.datasetKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('rid', {
            'name': 'rid',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('dataset_identifier', {
            'name': 'dataset_identifier',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.dataset_identifier\']',
            'is_relational': True,
            'documentation': None,
        }),
        ('dataset_version', {
            'name': 'dataset_version',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.dataset_version\']',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)

_dataset_identifier_relational_fields: Set[str] = {
        'dataset',
    }
_dataset_identifier_fields: Dict['types.dataset_identifierKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('rid_or_path', {
            'name': 'rid_or_path',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('dataset', {
            'name': 'dataset',
            'is_list': False,
            'optional': True,
            'type': 'models.dataset',
            'is_relational': True,
            'documentation': None,
        }),
        ('datasetid', {
            'name': 'datasetid',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_dataset_version_relational_fields: Set[str] = {
        'branch',
        'dataset',
    }
_dataset_version_fields: Dict['types.dataset_versionKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('data_identity_id', {
            'name': 'data_identity_id',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('data_identity_date', {
            'name': 'data_identity_date',
            'is_list': False,
            'optional': False,
            'type': 'datetime.datetime',
            'is_relational': False,
            'documentation': None,
        }),
        ('branch', {
            'name': 'branch',
            'is_list': False,
            'optional': True,
            'type': 'models.data_branch',
            'is_relational': True,
            'documentation': None,
        }),
        ('dataset', {
            'name': 'dataset',
            'is_list': False,
            'optional': True,
            'type': 'models.dataset',
            'is_relational': True,
            'documentation': None,
        }),
        ('datasetId', {
            'name': 'datasetId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('data_branchId', {
            'name': 'data_branchId',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
    ],
)

_data_branch_relational_fields: Set[str] = {
        'dataset_version',
    }
_data_branch_fields: Dict['types.data_branchKeys', PartialModelField] = OrderedDict(
    [
        ('id', {
            'name': 'id',
            'is_list': False,
            'optional': False,
            'type': '_int',
            'is_relational': False,
            'documentation': None,
        }),
        ('full_branch_name', {
            'name': 'full_branch_name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('sanitized_branch_name', {
            'name': 'sanitized_branch_name',
            'is_list': False,
            'optional': False,
            'type': '_str',
            'is_relational': False,
            'documentation': None,
        }),
        ('dataset_version', {
            'name': 'dataset_version',
            'is_list': True,
            'optional': True,
            'type': 'List[\'models.dataset_version\']',
            'is_relational': True,
            'documentation': None,
        }),
    ],
)



# we have to import ourselves as relation types are namespaced to models
# e.g. models.Post
from . import models, actions

# required to support relationships between models
model_rebuild(dataset)
model_rebuild(dataset_identifier)
model_rebuild(dataset_version)
model_rebuild(data_branch)
